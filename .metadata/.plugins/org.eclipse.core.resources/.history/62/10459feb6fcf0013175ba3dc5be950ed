package kr.android.camera;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.hardware.Camera.ShutterCallback;
import android.os.Bundle;
import android.os.Environment;
import android.support.v7.app.ActionBarActivity;
import android.util.AttributeSet;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

public class MainActivity extends ActionBarActivity {
	
	MyCameraSurface myCameraSurface;
	Button btnShutter;
	ImageView ivRawImage;
	File sd_path = Environment.getExternalStorageDirectory();
	
	SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmssSS");

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		btnShutter = (Button)findViewById(R.id.btnShutter);
		ivRawImage = (ImageView)findViewById(R.id.ivRawImage);
		
		btnShutter.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// 사진 촬영은 Camera객체의 takePickture메소드 호출을 통해 이뤄짐
				// takePicture는 ShutterCallback 구현 하나와 PictureCallback구현 두개
				// (Raw 이미지용 하나와 JPEG으로 인코딩 이미지 용 하나)를 매개변수로 받음
				myCameraSurface.takePicture(shutterCallback, rawCallback, picture);
				
				
			}
		});
	}
	
	ShutterCallback shutterCallback = new ShutterCallback() {
		
		@Override
		public void onShutter() {
			// Shutter가 닫힐 때 필요한 작업을 수행
			// 디폴트로 기본 Shutter 음 재생됨
			
		}
	};
	
	PictureCallback rawCallback = new PictureCallback() {
		
		@Override
		public void onPictureTaken(byte[] data, Camera camera) {
			// Raw이미지 데이터를 가지고 필요한 작업을 수행
			// 거의 사용 안하고 보통 null처리함			
		}
	};
	
	//사진 저장
	PictureCallback picture = new PictureCallback() {
		
								//byte[] data	: 영상데이터
		@Override
		public void onPictureTaken(byte[] data, Camera camera) {
			if(data!=null){
				//촬영한 이미지 표시
				BitmapFactory.Options opts = new BitmapFactory.Options();
				
				//원본은 건드리지 않고, 이미지 크기만 '1/입력숫자'로 줄여서 로딩함
				//비트맵이 메모리를 너무 많이 차지하는 문제를 해결하기 위한 옵션
				opts.inSampleSize = 16;
				
				Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);
				ivRawImage.setImageBitmap(bitmap);
				
				//촬영된 영상을 파일에 저장
				//파일명 지정
															//import java.util.Date;
				String filename = simpleDateFormat.format(new Date());
				
				FileOutputStream fileOutputStream = null;
				try{
					fileOutputStream = new FileOutputStream(sd_path.getAbsolutePath()+"/"+filename+".jpg");
				}catch(Exception e){
					Toast.makeText(MainActivity.this, "파일 저장 중 에러 발생", Toast.LENGTH_SHORT).show();
					Log.e("CameraDemo", "File Error", e);
					
				}finally{
					
				}
			}
			
		}
	};
	
}

/*
 * View에 동영상 또는 카메라 프리뷰와 같이 빠른 화면 변화 또는 그려지는 양이 많을 경우 SurfaceView를 사용해 처리
 * 
 * Surface는 그래픽버퍼 (데이터 제공)
 * SurfaceView에서 보여지는 화면 제어를 하기 위해서 SurfaceHolder생성
 * 
 * 
 * SurfaceView			: 화면 제공
 * -------------------
 * Surface				: 데이터 제공
 * -------------------
 * SurfaceHolder		: 화면 제어
 * -> SurfaceHolder를 이용해서 Surface(버퍼)에 그림을 그리면 SurfaceView에 반영
 * 
 * 
 * 이벤트 처리:
 * Callback Interface는 SurfaceHolder를 통해서 작성한 Surface와 SurfaceView를 연결하기 위해서 Surface의 생성, 변경, 종료에 대한 이벤트 처리
 * 
 * 
*/
//고속영상을 제공하는 뷰 정의
class MyCameraSurface extends SurfaceView implements SurfaceHolder.Callback{
	
	SurfaceHolder holder;
	//import android.hardware.Camera;
	Camera camera;

	public MyCameraSurface(Context context, AttributeSet attrs) {
		super(context, attrs);
		
		//SurfaceHolder초기화
		holder = getHolder();
		//SurfaceHolder와 Callback연결
		holder.addCallback(this);
		
	}

	//SurfaceView의 화면 크기가 바뀌는 등의 변경 시점에 미리보기 시작
	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {
		//카메라로 보기 구현하는 이벤트 처리
		camera.startPreview();
		
	}

	//표면 생성시 카메라 오픈하고 미리보기 설정
	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		//카메라 초기화
		camera = Camera.open();
		
		//SurfaceView가 만들어질 때 카메라 객체를 참조한 후 미리보기 화면으로 홀더 객체 생성
		try{
			//카메라 객체 홀더로 셋팅
			camera.setPreviewDisplay(holder);
			
		}catch(IOException e){
			camera.release();
			camera = null;			
		}
	}

	//Surface파괴시 카메라도 자원정리
	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
		//카메라로 보기 구현하는 이벤트 정지 처리
		if(camera!=null){ 
			//View정지
			camera.stopPreview();
			camera.release();
			camera = null;			
		} 
	}	
}

